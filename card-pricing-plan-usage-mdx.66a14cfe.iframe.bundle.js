"use strict";(self.webpackChunkjoy_treasury=self.webpackChunkjoy_treasury||[]).push([[3487],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./blocks/card-pricing-plan/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>usage});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const CardPricingPlanraw_namespaceObject='import React from "react";\nimport Button from "@mui/joy/Button";\nimport Card from "@mui/joy/Card";\nimport CardActions from "@mui/joy/CardActions";\nimport CardContent from "@mui/joy/CardContent";\nimport Chip from "@mui/joy/Chip";\nimport List from "@mui/joy/List";\nimport ListItem from "@mui/joy/ListItem";\nimport ListItemContent from "@mui/joy/ListItemContent";\nimport ListItemDecorator from "@mui/joy/ListItemDecorator";\nimport SvgIcon from "@mui/joy/SvgIcon";\nimport Typography from "@mui/joy/Typography";\n\nexport default function CardPricingPlan() {\n  const checkIcon = (\n    <SvgIcon sx={{ mt: "2px" }}>\n      <svg\n        xmlns="http://www.w3.org/2000/svg"\n        fill="none"\n        viewBox="0 0 24 24"\n        strokeWidth={1.5}\n        stroke="currentColor"\n        className="w-6 h-6"\n      >\n        <path\n          strokeLinecap="round"\n          strokeLinejoin="round"\n          d="M4.5 12.75l6 6 9-13.5"\n        />\n      </svg>\n    </SvgIcon>\n  );\n  return (\n    <Card\n      variant="soft"\n      color="primary"\n      invertedColors\n      sx={{ borderRadius: "xl" }}\n    >\n      <CardContent orientation="horizontal" sx={{ alignItems: "center" }}>\n        <Typography level="h3" sx={{ flex: "auto" }}>\n          PRO\n        </Typography>\n        <Chip variant="solid" size="sm" sx={{ borderRadius: "xs" }}>\n          Save $40\n        </Chip>\n      </CardContent>\n      <List sx={{ "& > li": { alignItems: "flex-start" } }}>\n        <ListItem>\n          <ListItemDecorator>{checkIcon}</ListItemDecorator>\n          <ListItemContent>Upload Video with HD Resolution</ListItemContent>\n        </ListItem>\n        <ListItem>\n          <ListItemDecorator>{checkIcon}</ListItemDecorator>\n          <ListItemContent>Attachment and Post Scheduling</ListItemContent>\n        </ListItem>\n        <ListItem>\n          <ListItemDecorator>{checkIcon}</ListItemDecorator>\n          <ListItemContent>Set your rates</ListItemContent>\n        </ListItem>\n        <ListItem>\n          <ListItemDecorator>{checkIcon}</ListItemDecorator>\n          <ListItemContent>Exclusive Deals</ListItemContent>\n        </ListItem>\n        <ListItem sx={(theme) => theme.variants.plainDisabled.primary}>\n          <ListItemDecorator>\n            <SvgIcon sx={{ mt: "2px" }}>\n              <svg\n                xmlns="http://www.w3.org/2000/svg"\n                fill="none"\n                viewBox="0 0 24 24"\n                strokeWidth={1.5}\n                stroke="currentColor"\n                className="w-6 h-6"\n              >\n                <path\n                  strokeLinecap="round"\n                  strokeLinejoin="round"\n                  d="M6 18L18 6M6 6l12 12"\n                />\n              </svg>\n            </SvgIcon>\n          </ListItemDecorator>\n          <ListItemContent>Advanced Statistics</ListItemContent>\n        </ListItem>\n      </List>\n      <CardContent>\n        <Typography\n          component="div"\n          fontSize="xl2"\n          fontWeight="xl"\n          textColor="text.primary"\n          endDecorator={\n            <Typography fontSize="md" fontWeight="400">\n              /month\n            </Typography>\n          }\n          sx={{ alignItems: "baseline" }}\n        >\n          $123\n        </Typography>\n        <CardActions>\n          <Button>Try 1 month</Button>\n        </CardActions>\n      </CardContent>\n    </Card>\n  );\n}\n';function _createMdxContent(props){const _components=Object.assign({h2:"h2",pre:"pre",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Card/Pricing/Plan"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx joy-treasury@latest clone card-pricing-plan\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cardpricingplan",children:"CardPricingPlan"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:CardPricingPlanraw_namespaceObject,language:"tsx"})]})}const usage=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);