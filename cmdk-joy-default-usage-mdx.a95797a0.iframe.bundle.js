"use strict";(self.webpackChunkjoy_treasury=self.webpackChunkjoy_treasury||[]).push([[5399],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./blocks/cmdk-joy-default/usage.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>usage});__webpack_require__("./node_modules/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const CmdkJoyDefaultraw_namespaceObject='import React from "react";\nimport Card from "@mui/joy/Card";\nimport CardContent from "@mui/joy/CardContent";\nimport Chip, { chipClasses } from "@mui/joy/Chip";\nimport Input from "@mui/joy/Input";\nimport List from "@mui/joy/List";\nimport ListItem from "@mui/joy/ListItem";\nimport ListItemButton from "@mui/joy/ListItemButton";\nimport ListItemContent from "@mui/joy/ListItemContent";\nimport ListSubheader from "@mui/joy/ListSubheader";\nimport SvgIcon from "@mui/joy/SvgIcon";\nimport { Command } from "cmdk";\n\nexport default function CmdkJoyDefault() {\n  return (\n    <Card\n      component={Command}\n      label="Command Menu"\n      size="sm"\n      sx={{ minWidth: 640, borderRadius: "lg", boxShadow: "lg", gap: 0 }}\n    >\n      <CardContent orientation="horizontal">\n        <Chip size="sm">Joy UI</Chip>\n        <Chip size="sm">CMDK</Chip>\n      </CardContent>\n      <Input\n        variant="plain"\n        placeholder="What do you need?"\n        slotProps={{ input: { component: Command.Input } }}\n        sx={{\n          "--Input-focusedThickness": 0,\n          borderRadius: 0,\n          borderBottom: "1px solid",\n          borderColor: "divider",\n          py: 2,\n          px: 1,\n        }}\n      />\n      <List\n        size="sm"\n        component={Command.List}\n        sx={(theme) => ({\n          mx: "calc(var(--Card-padding) * -1)",\n          px: "var(--Card-padding)",\n          borderRadius: "lg",\n          height: "min(300px, var(--cmdk-list-height))",\n          transition: "0.1s ease",\n          overflow: "auto",\n          "--List-gap": "4px",\n          "--ListItem-radius": "8px",\n          "--ListItem-minHeight": "44px",\n          \'[aria-selected="true"]\': theme.variants.plainHover.neutral,\n          "[hidden]": {\n            display: "none",\n          },\n          \'[role="option"]\': {\n            gap: 1,\n          },\n          [`& .${chipClasses.root}`]: {\n            borderRadius: "sm",\n            bgcolor: "background.level2",\n          },\n        })}\n      >\n        <ListItem component={Command.Empty} sx={{ justifyContent: "center" }}>\n          No results found.\n        </ListItem>\n\n        <ListItem\n          nested\n          component={Command.Group}\n          heading={<ListSubheader>Projects</ListSubheader>}\n        >\n          <ListItemButton component={Command.Item}>\n            <SvgIcon>\n              <svg\n                xmlns="http://www.w3.org/2000/svg"\n                width="24"\n                height="24"\n                viewBox="0 0 24 24"\n                fill="none"\n                stroke="currentColor"\n                stroke-width="2"\n                stroke-linecap="round"\n                stroke-linejoin="round"\n              >\n                <rect width="7" height="7" x="3" y="3" rx="1" />\n                <rect width="7" height="7" x="14" y="3" rx="1" />\n                <rect width="7" height="7" x="14" y="14" rx="1" />\n                <rect width="7" height="7" x="3" y="14" rx="1" />\n              </svg>\n            </SvgIcon>\n            <ListItemContent>Search Projects...</ListItemContent>\n            <Chip size="sm" component="kbd">\n              S\n            </Chip>\n            <Chip size="sm" component="kbd">\n              P\n            </Chip>\n          </ListItemButton>\n          <ListItemButton component={Command.Item}>\n            <SvgIcon>\n              <svg\n                xmlns="http://www.w3.org/2000/svg"\n                width="24"\n                height="24"\n                viewBox="0 0 24 24"\n                fill="none"\n                stroke="currentColor"\n                stroke-width="2"\n                stroke-linecap="round"\n                stroke-linejoin="round"\n              >\n                <path d="M5 12h14" />\n                <path d="M12 5v14" />\n              </svg>\n            </SvgIcon>\n            <ListItemContent>Create New Project...</ListItemContent>\n          </ListItemButton>\n        </ListItem>\n\n        <ListItem\n          nested\n          component={Command.Group}\n          heading={<ListSubheader>Teams</ListSubheader>}\n        >\n          <ListItemButton component={Command.Item}>\n            <SvgIcon>\n              <svg\n                xmlns="http://www.w3.org/2000/svg"\n                width="24"\n                height="24"\n                viewBox="0 0 24 24"\n                fill="none"\n                stroke="currentColor"\n                stroke-width="2"\n                stroke-linecap="round"\n                stroke-linejoin="round"\n              >\n                <circle cx="11" cy="11" r="8" />\n                <path d="m21 21-4.3-4.3" />\n              </svg>\n            </SvgIcon>\n            <ListItemContent>Search Teams...</ListItemContent>\n            <Chip size="sm" component="kbd">\n              ⇧\n            </Chip>\n            <Chip size="sm" component="kbd">\n              S\n            </Chip>\n          </ListItemButton>\n          <ListItemButton component={Command.Item}>\n            <SvgIcon>\n              <svg\n                xmlns="http://www.w3.org/2000/svg"\n                width="24"\n                height="24"\n                viewBox="0 0 24 24"\n                fill="none"\n                stroke="currentColor"\n                stroke-width="2"\n                stroke-linecap="round"\n                stroke-linejoin="round"\n              >\n                <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />\n                <circle cx="9" cy="7" r="4" />\n                <path d="M22 21v-2a4 4 0 0 0-3-3.87" />\n                <path d="M16 3.13a4 4 0 0 1 0 7.75" />\n              </svg>\n            </SvgIcon>\n            <ListItemContent>Create New Team...</ListItemContent>\n          </ListItemButton>\n        </ListItem>\n\n        <ListItem\n          nested\n          component={Command.Group}\n          heading={<ListSubheader>Help</ListSubheader>}\n        >\n          <ListItemButton component={Command.Item}>\n            <SvgIcon>\n              <svg\n                xmlns="http://www.w3.org/2000/svg"\n                width="24"\n                height="24"\n                viewBox="0 0 24 24"\n                fill="none"\n                stroke="currentColor"\n                stroke-width="2"\n                stroke-linecap="round"\n                stroke-linejoin="round"\n              >\n                <path d="M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3" />\n                <polyline points="14 2 14 8 20 8" />\n                <path d="M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" />\n                <path d="m9 18-1.5-1.5" />\n              </svg>\n            </SvgIcon>\n            <ListItemContent>Search Docs...</ListItemContent>\n            <Chip size="sm" component="kbd">\n              ⇧\n            </Chip>\n            <Chip size="sm" component="kbd">\n              S\n            </Chip>\n          </ListItemButton>\n        </ListItem>\n      </List>\n    </Card>\n  );\n}\n';function _createMdxContent(props){const _components=Object.assign({h2:"h2",pre:"pre",code:"code"},(0,lib.ah)(),props.components);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"Cmdk/Joy/Default"}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cli",children:"CLI"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-sh",children:"npx joy-treasury@latest clone cmdk-joy-default\n"})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"cmdkjoydefault",children:"CmdkJoyDefault"}),"\n",(0,jsx_runtime.jsx)(dist.Hw,{code:CmdkJoyDefaultraw_namespaceObject,language:"tsx"})]})}const usage=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)}}}]);